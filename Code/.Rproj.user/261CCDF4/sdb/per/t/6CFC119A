{
    "collab_server" : "",
    "contents" : "# -- dwj - 15/4/2018 tidied version of preprocessing for CATIE TRS using TRRIP\n\n# -- Depends on :\n#       preprocess_trajectories.R\n#\n# -- Produces :\n#       1) survivalData_tabulated.csv -- a table of all participants including TRRIP criteria met/not met, times\n#       2) missingData_tabulated.csv  -- similar to survivalData_tabulated, but formatteds for missing data analysis\n#       3) all_particiapant_IDs.csv   -- a simple list of all participant IDs.\n\n# -- preprocessing steps :\nsource(\"preprocess_trajectories.R\")\nrequire(reshape2)\n\n## -- Build tabulated data for survival analysis ---------------------------------------------\n  \n# -- IDs for participants missing Sx, SOF and Rx data\nmissing.Sx <- c() \nmissing.SOF <- c()\nmissing.Rx <- c()\n\n# -- main tabulated data for survival / incidence analysis\ntab.Surv <- data.frame( ID = numeric,        # patient ID\n                        time.inTrial = numeric, # time spent in trial\n\n                        onset.Sx  = numeric,    # time (day) Sx triggered above threshold\n                        onset.SOF = numeric,    # time (day) SOF triggered above threshold\n                        onset.Rx  = numeric,    # time (day) >= 2 adequate trial triggered above threshold\n\n                        time.onset.TRS = numeric, # time at which Sx *and* SOF triggered above threshold\n                        \n                        time.TRS  = numeric, # time *confirmed* TRS (if at all) : some day after onset.XX times\n                                             # NB : when adeq Rx > 2, we check the Sx and SOF for response, if none\n                                             # we \"call TRS\" at this time\n                        \n                        # summary of treatments\n                        numAdeq = numeric,   # number of adequate trials\n                        durAdeq = numeric,   # duration of adequate trials\n                        totalRx = numeric,   # total drug trials (whether adequate or not)\n\n                        # overall flags...\n                        status.rx = numeric,     # TRS criteria met on Rx >= 2\n                        status.sx = numeric,     # TRS criteria status on symptoms\n                        status.sof = numeric,    # TRS status on SOF\n                        status.TRS = numeric,    # status : 1 = censored (did not convert on exiting trial)\n                                                 #          2 = converted to TRS on exiting trial\n                        \n                        # TRS domains\n                        TRS.pos = numeric,       # resistance in pos domain\n                        TRS.neg = numeric,       # resistance in neg domain\n                        \n                        # data completely missing\n                        missing.Sx = numeric,\n                        missing.Rx = numeric,\n                        missing.SOF = numeric\n                        \n)\n\n#allIDs <- unique( demog.tab$src_subject_id )\n\n# -- make warnings errors that halt execution for debugging\noptions(warn = 2)\n\n# -- Some helper functions to make the following big loop easier to read ------------------\n  CreateNewRow <- function() {\n    return( \n      data.frame( \n        ID = thisID,\n        time.inTrial = keyvars$es_day[ which( keyvars$src_subject_id == thisID ) ],    # use end of study day as default\n        \n        onset.Sx  = NA,\n        onset.SOF = NA,\n        onset.Rx  = NA,\n        \n        time.onset.TRS = NA,\n        \n        time.TRS  = NA,\n        \n        numAdeq = NA,\n        durAdeq = NA,\n        totalRx = NA,\n        \n        status.rx = NA,\n        status.sx = NA,\n        status.sof = NA,\n        status.TRS = NA,\n        \n        TRS.pos = 0,       # resistance in pos domain\n        TRS.neg = 0,       # resistance in neg domain\n        \n        missing.Sx = 0,\n        missing.Rx = 0,\n        missing.SOF = 0\n      )\n    )\n  }\n\n# -- Function to check if a given participant is missing Rx, Sx and SOF data (to the extent we cannot)\n#    robustly process the participant further\nCheckZeroRecords <- function( thisRow, thisRx, thisSx, thisSOF ) {\n  # -- first, catch case where patient drops out with no real data\n  # -- NB : assumes missing.Rx, missing.Sx and missing.SOF are in global environment.\n  \n  # -- we do this by looking at Rx trajectory : \n  if ( nrow( thisRx ) < 1 )  { ## no treatments recorded at all\n    thisRow$status.rx <- NA\n    thisRow$totalRx   <- NA\n    noFurtherFlag <- 1    ## tell rest of loop to not bother\n    missing.Rx <- c( missing.Rx, thisID )\n    thisRow$missing.Rx <- 1\n  }\n  \n  # -- second, catch situation where Sx is missing - so we cannot assess response to treatment\n  if ( nrow( thisSx ) < 1 ) {\n    thisRow$status.sx <- NA\n    noFurtherFlag <- 1    ## tell rest of loop to not bother\n    missing.Sx <- c( missing.Sx, thisID )\n    thisRow$missing.Sx <- 1\n  }\n  \n  # -- third, catch situation where SOF is missing - so we cannot assess social/occ functioning\n  if ( nrow( thisSOF ) < 2 ) {\n    thisRow$status.sof <- NA\n    missing.SOF <- c( missing.SOF, thisID )\n    thisRow$missing.SOF <- 1\n  }\n  \n  return( list( thisRow, noFurtherFlag ) )\n  \n}\n\n# -- This is fairly ugly code which is difficult to follow.\n# -- The best way is to manually set the loop counter and trace through lines.\n#\n# -- Now track each participant ------------------------------------------------------------------------------------------\n  for ( i in 1:length( allIDs ) ) {\n    \n    # -- for this participant ...\n    thisID <- allIDs[i]\n    \n    # -- fetch Sx, SOF and Rx (stored in TRS.sx.traj, TRS.sofas.traj, and TRS.rx.traj) \n    # -- all output from \"TRS_CATIE_v3.R\"\n    thisSx  <- TRS.sx.traj[ which( TRS.sx.traj$ID == thisID ), ]\n    thisSOF <- TRS.sofas.traj[ which( TRS.sofas.traj$ID == thisID ), ]\n    thisRx  <- TRS.rx.traj[ which( TRS.rx.traj$ID == thisID ), ]\n  \n    noFurtherFlag <- 0\n  \n    # -- build a blank data.frame to store this participant\n    thisRow <- CreateNewRow()\n\n    # -- check for \"zero\" records for this participant\n    check.zero    <- CheckZeroRecords( thisRow, thisRx, thisSx, thisSOF )\n    noFurtherFlag <- check.zero[[2]]\n    thisRow       <- check.zero[[1]]\n\n    # -- if we have treatment (Rx) data, then process Sx trajectory\n    if ( noFurtherFlag == 0 ) {\n      \n      # -- there is at least one participant who's last.visit.day in thisRx is later than the thisSx.visday\n      #    and thisSOF.visday : capture this, and set last.visit.day equal to the last day of thisSx.visday\n      if ( thisRx$last.visit.day[ nrow(thisRx) ] > thisSx$visday[nrow(thisSx)] ) {\n        thisRx$last.visit.day[ nrow(thisRx) ] <- thisSx$visday[nrow(thisSx)]\n      }\n      \n      # -- order SOF by visday\n      thisSOF <- thisSOF[ order( thisSOF$visday ), ]\n      # -- remove duplicated SOF rows\n      thisSOF <- thisSOF[ !duplicated( thisSOF ), ]\n      \n      # -- Same for symptoms \n      thisSx  <- thisSx[ order( thisSx$visday ), ]\n      thisSx  <- thisSx[ !duplicated( thisSx ), ]\n      # -- and treatments (for which there are never any duplicates)\n      thisRx  <- thisRx[ order( thisRx$last.visit.day ), ]\n     \n      # -- join a subset of columns in thisSx and thisSOF with thisRx to compile TRS status \n      temp <- left_join( thisSx, \n                         thisSOF[ , names(thisSOF) %in% c(\"visday\",\"TRS.sofas.traj\") ],\n                         by = \"visday\" )  \n      \n      temp <- left_join( temp, thisRx[ names(thisRx) %in% c(\"rxDuration\",\"adeqTrial\",\"cumAdeqRx\",\"cumRx\",\"last.visit.day\") ],\n                         by = c(\"visday\" = \"last.visit.day\") )\n      \n      # --------------- time at which participant *first* triggers thresholds for SOF and Sx and Rx\n      temp$onsetSxFlag <- ifelse(   ( temp$TRS.pos == 1 |\n                                      temp$TRS.neg == 1 ), 1, 0\n      )\n      \n      # -- flag if the participant reached *BOTH* Sx and SOF criteria\n      temp$SOF.and.Sx.TRS <- ifelse( temp$onsetSxFlag== 1 & temp$TRS.sofas.traj == 1, 1, 0 )\n      \n      # -- filter on cumAdeqRx\n      temp2 <- temp[ which( !is.na( temp$cumAdeqRx ) ), ]\n      \n      # -- Store number of adequate trials, duration of adequate trials and total treatments\n      numAdeq <- max( thisRx$cumAdeqRx )\n      durAdeq <- sum( thisRx$rxDuration[ which( thisRx$adeqTrial == 1 ) ] )\n      totalRx <- max( thisRx$cumRx )\n      \n      # flag if ever meets SOF and Sx criteria together\n      idxEver <- which( temp2$SOF.and.Sx.TRS == 1)\n      # -- idxEver : contains rows idxs for when Sx + SOF > threshold\n      \n      # -- if NEVER has Sx and SOF criteria together then set variables to record non-TRS ...\n      if( length( idxEver ) == 0 ) {\n                \n                idxFirstSx  <- which( temp$onsetSxFlag == 1 )\n                idxFirstSOF <- which( temp$TRS.sofas.traj == 1 )\n                idxFirstRx  <- which( thisRx$adeqTrial == 1 )\n                if( length( idxFirstSx ) == 0 ) {\n                  onset.Sx <- NA\n                } else {\n                  onset.Sx  <- temp$visday[ min( idxFirstSx ) ]\n                }\n                \n                if( length( idxFirstSOF ) == 0 ) {\n                  onset.SOF <- NA\n                } else {\n                  onset.SOF <- temp$visday[ min( idxFirstSOF ) ]\n                }\n        \n                # -- as never reaches criteria for Rx >= 2        \n                onset.Rx <- NA\n                \n                time.onset.TRS <- NA\n                time.TRS       <- NA\n                \n                status.rx  <- NA\n                status.sx  <- NA\n                status.sof <- NA\n                status.TRS <- 1    # censored - never met TRS criteria\n                \n                TRS.pos = 0        # obviously, cannot meet resistance in pos domain\n                TRS.neg = 0        # or in neg domain\n      }\n      \n      # -- if this participant DOES meet Sx and SOF criteria together ... establish TRS status\n      if ( length( idxEver ) > 0 ) {\n        # -- now, ascertain the BASELINE for PANSS change, then when adeqRx >= 2 and\n\n        # -- compute time at which Sx and SOF were \"at risk\" -- i.e. above threshold, but NOT YET had adequate treatment\n        onset.Sx  <- temp$visday[ min( which( temp$onsetSxFlag == 1 ) ) ]\n        onset.SOF <- temp$visday[ min( which( temp$TRS.sofas.traj == 1 ) ) ]\n        \n        # -- and then time at which adequate trials passes threshold >= 2\n        onset.rx.idx <- which( temp$cumAdeqRx >= 2 )\n        if ( length( onset.rx.idx ) == 0 ) { \n          # -- in this case, participant NEVER had >= 2 adequate trials\n          onset.Rx  <- NA\n        } else {\n          # -- otherwise, store time and which they completed >= 2 adequate trials\n          onset.Rx  <- temp$visday[ min( onset.rx.idx ) ]        \n        }\n        \n        # -- compute time at which Sx and SOF were at risk together (but not necessarily the Adequate Rx criteria met)\n        time.onset.TRS <- temp$visday[ min( which( temp$SOF.and.Sx.TRS == 1 ) ) ]\n        \n        # -- extract the PANSS scores at time.onset.TRS : this will be the baseline for symptom change measurement\n        baselinePANSS <- temp[ which( temp$visday == time.onset.TRS ), c(\"visday\", \"adjPos\", \"adjNeg\", \"adjGen\", \"adjTot\") ]\n        \n        # -- extract the PANSS scores for followup \n        # -- this will be after 0, 1 or 2 adequate trials and will be the follow-up time for symptom change measurement\n        \n        # -- never had 2 adequate trials, so we cannot record they were TRS\n        if ( is.na( onset.Rx ) ) {\n          # -- but we still require some measurement of symptom change\n          # -- if they did not have 2 adequate trials, but numAdeq > 0 ==> after one adequate trial, we record PANSS for response\n          if ( numAdeq > 0 ) {\n            followupPANSS <- temp[ min( which( temp$cumAdeqRx == 1 ) ), c(\"visday\", \"adjPos\", \"adjNeg\", \"adjGen\", \"adjTot\") ]\n          } else \n            # -- NEVER had even one adequate trial, so use end of trial\n            # -- find last day with PANSS scores\n            {\n              tempPANSS <- temp[\n                                  complete.cases( temp[ , c(\"visday\", \"adjPos\", \"adjNeg\", \"adjGen\", \"adjTot\") ] ),\n                                  c(\"visday\", \"adjPos\", \"adjNeg\", \"adjGen\", \"adjTot\")\n                                ]\n              followupPANSS <- tempPANSS[ nrow( tempPANSS ), ]\n            }\n        } else \n          # -- Had TWO full adequate trials, and therefore\n          # -- use onset.Rx day as the follow up AFTER 2 adequate trials\n          { \n            followupPANSS <- temp[ which( temp$visday == onset.Rx ), c(\"visday\", \"adjPos\", \"adjNeg\", \"adjGen\", \"adjTot\") ]\n          }\n        \n        # -- just incase, clear up duplicate panss rows\n        followupPANSS <- followupPANSS[ !duplicated( followupPANSS ), ]\n        baselinePANSS <- baselinePANSS[ !duplicated( baselinePANSS ), ]\n        \n        # -- percentage change in symptoms : Leucht et al, 2009\n        deltaPANSS <- 100 * ( baselinePANSS[ c(\"adjPos\", \"adjNeg\", \"adjTot\") ] - followupPANSS[ c(\"adjPos\", \"adjNeg\", \"adjTot\") ] ) /\n                                followupPANSS[ c(\"adjPos\", \"adjNeg\", \"adjTot\") ]\n        \n        # -- Now, if deltaPANSS >= 20% ==> improvement threshold, therefore NOT TRS on that PANSS domain\n        TRS.change.PANSS.criteria <- ifelse( deltaPANSS >= 20, 0, 1 )\n        \n        # -- Record time at which SOF, absolute Sx and cumAdeqRx >= 2\n        idxTimeTRS     <- which( temp2$SOF.and.Sx.TRS == 1 & temp2$cumAdeqRx >= 2 )\n        if ( length( idxTimeTRS ) == 0 ) \n          # -- never became TRS\n          { \n            time.TRS       <- NA\n          } else \n          # -- became TRS\n          {\n            time.TRS       <- temp2$visday[ min( idxTimeTRS  ) ]\n          }\n        \n        # -- record IF EVER met Rx >= 2 criteria\n        status.rx  <- ifelse( !is.na( onset.Rx ) & onset.Rx  > 0, 1, 0 )\n        \n        # -- meets change criteria ? 1 => the < 20% change on total *and* one domain \n        status.sx <- ifelse( \n                                ( TRS.change.PANSS.criteria[3] == 1 ) &   # PANSS total change < 20%\n                                ( TRS.change.PANSS.criteria[1] == 1 | TRS.change.PANSS.criteria[2] == 1 ),   # either Pos or Neg domains are resistant\n                                1, 0 )\n        \n        # -- absolute criteria threshold STILL met at followup time ONLY if time.TRS is *not* NA\n        # -- So, check that time.TRS is not NA (==> simultaneously met absolute Sx and Rx conditions)\n        # -- AND that the change in symptoms was actually < 20% -- status.sx.delta\n        if( !is.na( time.TRS ) & status.sx == 1 ) {\n          # -- the SOF + absolute Sx + Rx criteria were ALL met \n          status.TRS <- 2\n        } else {\n          # -- participant is treatment response / censored\n          status.TRS <- 1\n        }\n          \n        status.sof <- ifelse( !is.na( onset.SOF ) & onset.SOF > 0, 1, 0 )\n        TRS.pos = TRS.change.PANSS.criteria[1]       # resistance in pos domain 1,0\n        TRS.neg = TRS.change.PANSS.criteria[2]       # resistance in neg domain 1,0\n        \n      }\n  \n      # -- complete thisRow and store\n      thisRow$onset.Sx    <- onset.Sx\n      thisRow$onset.SOF   <- onset.SOF\n      thisRow$onset.Rx    <- onset.Rx\n      \n      thisRow$time.onset.TRS <- time.onset.TRS\n      thisRow$time.TRS       <- time.TRS\n      thisRow$status.TRS     <- status.TRS\n      \n      thisRow$numAdeq     <- numAdeq\n      thisRow$durAdeq     <- durAdeq\n      \n      thisRow$totalRx     <- totalRx\n      thisRow$status.rx   <- status.rx\n      thisRow$status.sx   <- status.sx\n      thisRow$status.sof  <- status.sof\n      thisRow$TRS.pos     <- TRS.pos\n      thisRow$TRS.neg     <- TRS.neg\n  \n    }\n    \n    tab.Surv <- rbind( tab.Surv, thisRow )\n    \n  }\n  \n  options(warn = 0)\n  \n# -- for ease of use/presentation, convert event time to years\ntab.Surv$time.inTrialYrs <- tab.Surv$time.inTrial / 365\ntab.Surv$time.onset.TRSYrs  <- tab.Surv$time.onset.TRS / 365\ntab.Surv$time.TRSYrs <- tab.Surv$time.TRS / 365\n\n# -------------------------------------------- Finished processing trajectories through trial for all participants.\n\n# -------------------------------------\n# Descriptive numbers on TRS cases\n# -------------------------------------\ncat(\n  paste(\"Full TRS Cases  = \", length( which( tab.Surv$status.TRS == 2 ) ) ),\n  paste(\"Cases meeting SOF and Sx at follow up, but who had ONLY 1 adequate trials = \", \n        length( which( tab.Surv$status.sx == 1 & tab.Surv$status.sof == 1 & tab.Surv$numAdeq == 1 ) ) ),\n  paste(\"Cases meeting SOF and Sx at follow up, but who had ZERO adequate trials = \", \n        length( which( tab.Surv$status.sx == 1 & tab.Surv$status.sof == 1 & tab.Surv$numAdeq == 0 ) ) ),\n  sep = \"\\n\"\n)\n\n\n# ------------------------------------------------------------------------------------------------------------------\n# -- Fetch and collate demographics and baseline data necessary to reproduce the baseline analysis used in descriptives \n#    from original CATIE paper -- Lieberman (2005) NEJM -- reproducing table 1 pp. 1213 \n  \ndemog.keep.vars <- c(\"src_subject_id\",\n                     \"interview_age\",\n                     \"gender\",\n                     \"race\",       # white or black / african american\n                     \"hispanic\",   # Hispanic, latino or Spanich origin\n                     \"educ_yrs\",   # educationin years\n                     \"das1ms\",     # martical status\n                     \"employ2\",    # fulltime employment or not (1 = yes, 0 = no)\n                     \"exacer\",     # exacerbation / crisis stabilisation / admission in past 3 months\n                     \n                     # we have already collected PANSS so don't reproduce here\n                     \n                     \"cgi_sev\",    # clinical global impression score, 4 = moderately ill, 7 = most ill, 1 = not ill at all\n                     \n                     # pscyhiatric hx\n                     \"yrs_trt\",    # years since first treated for scid17a emotional/behav problem\n                     \"yrs_pres\",   # years since first Rx with antipsychotic\n                     \n                     ## SCID diagnosis in past 5 yrs -- sourced elsewhere\n                     \n                     ## Baseline antipsychotic meds\n                     \"olz_0\",\n                     \"quet_0\",   ## baseline meds\n                     \"risp_0\",\n                     \"zip_0\",\n                     \"hal_0\",\n                     \"deca_0\",\n                     \"per_0\",\n                     \"othr_0\"\n) \n\n# -- retain demographics we need for analysis / missing data\ndemog.X <- demog.tab[, names(demog.tab) %in% demog.keep.vars ]\n# -- strip duplicates\ndemog.X <- demog.X[ !duplicated( demog.X), ]\n\n# -- recode variables in demog.X for comptibility with Table 1, NEJM 2005 paper \ndemog.X$gender  <- ifelse( demog.X$gender == \"M\", 1, 0 )    # 1 == Male, 0 == female\n\n# -- `race` is more complex : code for White, Black, Other and then hispanic / Latino / spanish ethnicity separately\n  demog.X$raceCoded <- rep(\"Other\",nrow(demog.X))\n  demog.X$raceCoded[ which( demog.X$race == \"Black or African American\") ] <- \"Black\"\n  demog.X$raceCoded[ which( demog.X$race == \"White\") ] <- \"White\"\n  demog.X$raceCoded[ which( demog.X$hispanic == 1) ] <- \"Hispanic\"\n  demog.X$raceCoded <- as.factor( demog.X$raceCoded )\n  demog.X <- demog.X[ , !( names( demog.X ) %in% c(\"race\",\"hispanic\") ) ]\n\n# -- marital status\n  demog.X$marital <- rep(rep(\"Other\",nrow(demog.X)))\n  demog.X$marital[ which( demog.X$das1ms == \"Married\" ) ] <- \"Married\"\n  demog.X$marital[ which( demog.X$das1ms == \"Never married\" ) ] <- \"NeverMarried\"\n  demog.X$marital[ which( demog.X$das1ms == \"Separated\" ) ] <- \"PrevMarried\"\n  demog.X$marital[ which( demog.X$das1ms == \"Widowed\" ) ] <- \"PrevMarried\"\n  demog.X$marital[ which( demog.X$das1ms == \"Divorced\" ) ] <- \"PrevMarried\"\n  demog.X$marital <- as.factor( demog.X$marital )\n  demog.X <- demog.X[ , !( names( demog.X ) %in% c(\"das1ms\") ) ]\n  \n# -- get baseline PANSS data\npanss.X <- PANSS.tab[ PANSS.tab$visday == 1, ]\n# -- strip duplicates\npanss.X <- panss.X[ !duplicated( panss.X), ]\n\n# -- compute total domains P, N and G : for convenience \npanss.PNG <- data.frame( src_subject_id = panss.X$src_subject_id,\n                         P  = rowSums( panss.X[ , 5:11 ] ),\n                         N  = rowSums( panss.X[ , 12:18 ] ),\n                         G  = rowSums( panss.X[ , 19:34 ] )\n)\n\n# -- join panss and demographics at baseline\nres <- inner_join(panss.PNG, demog.X)\n\n# -- next join PMHx-diagnoses (see original NEJM paper 2005 - where these variables where used in descriptives)\nres <- inner_join(res, pmhx.tab, by = c(\"src_subject_id\" = \"ID\" ) )\n\n# -- next, join with SCID dx\nres <- inner_join(res, SCID.tab, by = c(\"src_subject_id\" = \"src_subject_id\" ) )\n\n# now join with global tab.Surv\nres <- inner_join(res, tab.Surv, by = c(\"src_subject_id\" = \"ID\"))\n\n# -- and tidy up\ntab.Surv <- res\nrm( res )\n\n# -- rename ID column for convenience\nnames(tab.Surv)[names(tab.Surv) == 'src_subject_id'] <- 'ID'\n\n# -- remove duplicated rows due to > 1 entry for baseline (only one case, ID = 2780 from visual inspection)\ntab.Surv <- tab.Surv[ !duplicated( tab.Surv$ID ), ]\n\n# -- some housekeeping : tidy up data.frame col names to be meaningful\nnewNames <- c(\"ID\", \"P\", \"N\", \"G\", \"age\", \"sex\", \n              \"exac3mo\", \"yrsEduc\", \"CGIsev\", \"employFT\", \"yrsFirstTx\", \"yrsFrstAntiPsyRx\",\n              \"olzB0\", \"quetB0\", \"rispB0\", \"zipB0\", \"halB0\", \"decaB0\",\n              \"perB0\", \"otherB0\", \"race\", \"marital\", \"COPD\", \"DM\",\n              \"HepABC\", \"Lipid\", \"HTN\", \"IHD\", \"OsteoArth\", \"Osteopor\",\n              \"STI\", \"Depression\", \"alcDep_5yrs\", \"alcAbuse_5yrs\", \"drugDep_5yrs\",  \"drugAbuse_5yrs\",              \n              \"OCD_5yrs\", \"anxDis_5yrs\", \n              \n              \"time.inTrial\", \"onset.Sx\",\n              \"onset.SOF\", \"onset.Rx\", \"time.onset.TRS\", \"time.TRS\", \"numAdeq\",             \n              \"durAdeq\", \"totalRx\", \"status.rx\", \"status.sx\", \"status.sof\",          \n              \"status.TRS\", \"TRS.pos\", \"TRS.neg\", \"missing.Sx\", \"missing.Rx\",\n              \"missing.SOF\", \"time.inTrialYrs\", \"time.onset.TRSYrs\", \"time.TRSYrs\")\n            \nnames( tab.Surv ) <- newNames\n\n# -- variables to REMOVE for predicting missing-ness at follow up\nremovePreds <- c(\"ID\", \"onset.Sx\", \"onset.SOF\", \"onset.Rx\",\n                 \"time.onset.TRS\", \"time.TRS\", \"numAdeq\", \n                 \"durAdeq\", \"totalRx\", \"status.rx\",\n                 \"status.sx\", \"status.sof\", \"status.TRS\",\n                 \"TRS.pos\", \"TRS.neg\", \"time.inTrial\", \"time.onset.TRSYrs\", \"time.TRSYrs\",\n                 \"missing.Sx\", \"missing.Rx\", \"missing.SOF\")\n\n# -- missing data table : we get rid of removePreds\nmissingTab <- tab.Surv[ , which( !( names( tab.Surv ) %in% removePreds ) ) ]\nallIDs <- tab.Surv$ID\n\n# -- add in missing flags to use later\nmissingTab$missingFU.rx      <- tab.Surv$missing.Rx\nmissingTab$missingFU.sx      <- tab.Surv$missing.Sx\nmissingTab$missingFU.sof     <- tab.Surv$missing.SOF\nmissingTab$missingFU.any     <- ifelse( \n                                          ( missingTab$missingFU.rx == 1 |\n                                            missingTab$missingFU.sx == 1 |\n                                            missingTab$missingFU.sof == 1 ), 1, 0 )\n\n# -- store missingTab (for missing data analyses)\n# -- tab.Surv (for survival analyses, and more)\n# -- allIDs (just a vector off all participant IDs)\nsave( missingTab, tab.Surv, allIDs, file = paste0( data.path, \"survival_tabulated_data_v3.RData\") )\n\n# -- save in non-proprietary format\nwrite.csv( missingTab, file = paste0( data.path, \"missingData_tabulated_v3.csv\"), row.names = FALSE )\nwrite.csv( tab.Surv,   file = paste0( data.path, \"survivalData_tabulated_v3.csv\"), row.names = FALSE )\nwrite.csv( allIDs,     file = paste0( data.path, \"all_participant_IDs.csv\"), row.names = FALSE)\n",
    "created" : 1524131849117.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "205|36|235|6|\n268|30|270|10|\n273|13|279|12|\n283|11|285|10|\n302|11|304|10|\n306|11|308|10|\n",
    "hash" : "3563433840",
    "id" : "6CFC119A",
    "lastKnownWriteTime" : 1524145434,
    "last_content_update" : 1524145434085,
    "path" : "~/Dropbox/CATIE_Multivar/CATIE_TRS/FinalTRSPaper/Code/tabulate_cases.R",
    "project_path" : "tabulate_cases.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}